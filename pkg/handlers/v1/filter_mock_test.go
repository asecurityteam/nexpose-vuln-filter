// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/asecurityteam/nexpose-vuln-filter/pkg/domain (interfaces: VulnerabilityFilter)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/asecurityteam/nexpose-vuln-filter/pkg/domain"
)

// MockVulnerabilityFilter is a mock of VulnerabilityFilter interface
type MockVulnerabilityFilter struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityFilterMockRecorder
}

// MockVulnerabilityFilterMockRecorder is the mock recorder for MockVulnerabilityFilter
type MockVulnerabilityFilterMockRecorder struct {
	mock *MockVulnerabilityFilter
}

// NewMockVulnerabilityFilter creates a new mock instance
func NewMockVulnerabilityFilter(ctrl *gomock.Controller) *MockVulnerabilityFilter {
	mock := &MockVulnerabilityFilter{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVulnerabilityFilter) EXPECT() *MockVulnerabilityFilterMockRecorder {
	return m.recorder
}

// FilterVulnerabilities mocks base method
func (m *MockVulnerabilityFilter) FilterVulnerabilities(arg0 context.Context, arg1 domain.Asset, arg2 []domain.Vulnerability) []domain.Vulnerability {
	ret := m.ctrl.Call(m, "FilterVulnerabilities", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Vulnerability)
	return ret0
}

// FilterVulnerabilities indicates an expected call of FilterVulnerabilities
func (mr *MockVulnerabilityFilterMockRecorder) FilterVulnerabilities(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterVulnerabilities", reflect.TypeOf((*MockVulnerabilityFilter)(nil).FilterVulnerabilities), arg0, arg1, arg2)
}

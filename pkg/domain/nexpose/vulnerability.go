package nexpose

// AssetVulnerabilityDetails is a Nexpose asset vulnerability response payload appeneded
// with vulnerability which is the Nexpose vulnerability details response payload
type AssetVulnerabilityDetails struct {
	VulnerabilityFinding
	Vulnerability Vulnerability `json:"vulnerability"`
}

// VulnerabilityFinding represents the details for a vulnerability found on an asset
// See: https://help.rapid7.com/insightvm/en-us/api/index.html#operation/getAssetVulnerability
type VulnerabilityFinding struct {
	// The identifier of the vulnerability.
	ID string `json:"id"`
	// The number of vulnerable occurrences of the vulnerability. This does not include `invulnerable` instances.
	Instances int32 `json:"instances"`
	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`
	// The vulnerability check results for the finding.
	Results []AssessmentResult `json:"results,omitempty"`
	// The status of the finding.
	Status string `json:"status"`
}

// AssessmentResult represents a vulnerability check result
type AssessmentResult struct {
	// The identifier of the vulnerability check.
	CheckID string `json:"checkId,omitempty"`
	// If the result is vulnerable with exceptions applied, the identifier(s) of the exceptions actively applied to the result.
	Exceptions []int32 `json:"exceptions,omitempty"`
	// An additional discriminating key used to uniquely identify between multiple instances of results on the same finding.
	Key string `json:"key,omitempty"`
	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`
	// The port of the service the result was discovered on.
	Port int32 `json:"port,omitempty"`
	// The proof explaining why the result was found vulnerable. The proof may container embedded HTML formatting markup.
	Proof string `json:"proof,omitempty"`
	// The protocol of the service the result was discovered on.
	Protocol string `json:"protocol,omitempty"`
	// The status of the vulnerability check result.
	Status string `json:"status"`
}

// Vulnerability represents a Nexpose vulnerability response payload
// See: https://help.rapid7.com/insightvm/en-us/api/index.html#operation/getVulnerability
type Vulnerability struct {
	// The date the vulnerability coverage was added. The format is an ISO 8601 date, `YYYY-MM-DD`.
	DateAdded string `json:"added,omitempty"`
	// All vulnerability categories assigned to this vulnerability.
	Categories []string `json:"categories,omitempty"`
	// All CVEs assigned to this vulnerability.
	Cves []string `json:"cves,omitempty"`
	// The CVSS vector(s) for the vulnerability.
	Cvss *VulnerabilityCvss `json:"cvss,omitempty"`
	// Whether the vulnerability can lead to Denial of Service (DoS).
	DenialOfService bool `json:"denialOfService,omitempty"`
	// The description of the vulnerability.
	Description *ContentDescription `json:"description,omitempty"`
	// The exploits that can be used to exploit a vulnerability.
	Exploits int32 `json:"exploits,omitempty"`
	// The identifier of the vulnerability.
	ID string `json:"id,omitempty"`
	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`
	// The malware kits that are known to be used to exploit the vulnerability.
	MalwareKits int32 `json:"malwareKits,omitempty"`
	// The last date the vulnerability was modified. The format is an ISO 8601 date, `YYYY-MM-DD`.
	Modified string `json:"modified,omitempty"`
	// Details the Payment Card Industry (PCI) details of the vulnerability.
	PCI *PCI `json:"pci,omitempty"`
	// The date the vulnerability was first published or announced. The format is an ISO 8601 date, `YYYY-MM-DD`.
	Published string `json:"published,omitempty"`
	// The risk score of the vulnerability, rounded to a maximum of to digits of precision. If using the default Rapid7 Real Riskâ„¢ model, this value ranges from 0-1000.
	RiskScore float64 `json:"riskScore,omitempty"`
	// The severity of the vulnerability, one of: `\"Moderate\"`, `\"Severe\"`, `\"Critical\"`.
	Severity string `json:"severity,omitempty"`
	// The severity score of the vulnerability, on a scale of 0-10.
	SeverityScore int32 `json:"severityScore,omitempty"`
	// The title (summary) of the vulnerability.
	Title string `json:"title,omitempty"`
}

// VulnerabilityCvss represents the CVSS field of a Nexpose vulnerability
type VulnerabilityCvss struct {
	// Hypermedia links to corresponding or related resources.
	Links []Link `json:"links,omitempty"`
	// The Common Vulnerability Scoring System (https://www.first.org/cvss/v2/guide) information for the vulnerability.
	V2 *VulnerabilityCvssV2 `json:"v2,omitempty"`
	// The Common Vulnerability Scoring System (https://www.first.org/cvss/specification-document) information for the vulnerability.
	V3 *VulnerabilityCvssV3 `json:"v3,omitempty"`
}

// VulnerabilityCvssV2 represents the v2 payload in a CVSS object seen above
type VulnerabilityCvssV2 struct {
	// Access Complexity (AC) component which measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system.
	AccessComplexity string `json:"accessComplexity,omitempty"`
	// Access Vector (Av) component which reflects how the vulnerability is exploited.
	AccessVector string `json:"accessVector,omitempty"`
	// Authentication (Au) component which measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability.
	Authentication string `json:"authentication,omitempty"`
	// Availability Impact (A) component which measures the impact to availability of a successfully exploited vulnerability.
	AvailabilityImpact string `json:"availabilityImpact,omitempty"`
	// Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
	ConfidentialityImpact string `json:"confidentialityImpact,omitempty"`
	// The CVSS exploit score.
	ExploitScore float64 `json:"exploitScore,omitempty"`
	// The CVSS impact score.
	ImpactScore float64 `json:"impactScore,omitempty"`
	// Integrity Impact (I) component measures the impact to integrity of a successfully exploited vulnerability.
	IntegrityImpact string `json:"integrityImpact,omitempty"`
	// The CVSS score, which ranges from 0-10.
	Score float64 `json:"score,omitempty"`
	// The CVSS v2 vector.
	Vector string `json:"vector,omitempty"`
}

// VulnerabilityCvssV3 represents the v3 payload in a CVSS object seen above
type VulnerabilityCvssV3 struct {
	// Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
	AttackComplexity string `json:"attackComplexity,omitempty"`
	// Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.
	AttackVector string `json:"attackVector,omitempty"`
	// Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
	AvailabilityImpact string `json:"availabilityImpact,omitempty"`
	// Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
	ConfidentialityImpact string `json:"confidentialityImpact,omitempty"`
	// The CVSS impact score.
	ExploitScore float64 `json:"exploitScore,omitempty"`
	// The CVSS exploit score.
	ImpactScore float64 `json:"impactScore,omitempty"`
	// Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability.
	IntegrityImpact string `json:"integrityImpact,omitempty"`
	// Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.
	PrivilegeRequired string `json:"privilegeRequired,omitempty"`
	// Scope (S) measures the collection of privileges defined by a computing authority.
	Scope string `json:"scope,omitempty"`
	// The CVSS score, which ranges from 0-10.
	Score float64 `json:"score,omitempty"`
	// User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.
	UserInteraction string `json:"userInteraction,omitempty"`
	// The CVSS v3 vector.
	Vector string `json:"vector,omitempty"`
}

// ContentDescription represents the description field of a vulnerability
type ContentDescription struct {
	// Hypertext Markup Language (HTML) representation of the content.
	HTML string `json:"html,omitempty"`
	// Textual representation of the content.
	Text string `json:"text,omitempty"`
}

// PCI represents the pci field of a vulnerability
type PCI struct {
	// The CVSS score of the vulnerability, adjusted for PCI rules and exceptions, on a scale of 0-10.
	AdjustedCVSSScore int32 `json:"adjustedCVSSScore,omitempty"`
	// The severity score of the vulnerability, adjusted for PCI rules and exceptions, on a scale of 0-10.
	AdjustedSeverityScore int32 `json:"adjustedSeverityScore,omitempty"`
	// Whether if present on a host this vulnerability would cause a PCI failure. `true` if \"status\" is `\"Fail\"`, `false` otherwise.
	Fail bool `json:"fail,omitempty"`
	// Any special notes or remarks about the vulnerability that pertain to PCI compliance.
	SpecialNotes string `json:"specialNotes,omitempty"`
	// The PCI compliance status of the vulnerability. One of: `"Pass"`, `"Fail"`.
	Status string `json:"status,omitempty"`
}
